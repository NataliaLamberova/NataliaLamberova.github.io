geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("Excess deaths")+ylab("Number of Cases")+ggtitle("Model 1 Merginal Effects dy/d  excess deaths")
p_load(ggeffects)
df_art1<-ggpredict(s1ccc, terms = "ex_deaths")
ggplot(df_art1, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("Excess deaths")+ylab("Number of Cases")+ggtitle("Model 1 Merginal Effects dy/d(excess deaths)")
df_art2<-ggpredict(s1ggg, terms = "ex_deaths")
ggplot(df_art2, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("Excess deaths")+ylab("Number of Cases")+ggtitle("Model 5 Merginal Effects dy/d(excess deaths)")
df_art5<-ggpredict(s1ggg, terms = c("UR_share"))
ggplot(df_art5, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("UR share")+ylab("Number of Cases")+ggtitle("Model 5 Merginal Effects dy/d(UR share)")
df_art5<-ggpredict(s1ggg, terms = c("UR_share"))
ggplot(df_art5, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("UR share")+ylab("Number of Cases")+ggtitle("Model 5 Marginal Effects dy/d(UR share)")
df_art6<-ggpredict(s1ggg, terms = c("civil"))
ggplot(df_art6, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("civil")+ylab("Number of Cases")+ggtitle("Model 5 Marginal Effects dy/d(civil)")
a<-ggplot(df_art1, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("Excess deaths")+ylab("Number of Cases")+ggtitle("Model 1 Marginal Effects dy/d(excess deaths)")
b<-ggplot(df_art2, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("Excess deaths")+ylab("Number of Cases")+ggtitle("Model 5 Marginal Effects dy/d(excess deaths)")
c<-ggplot(df_art5, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("UR share")+ylab("Number of Cases")+ggtitle("Model 5 Marginal Effects dy/d(UR share)")
d<-ggplot(df_art6, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("civil")+ylab("Number of Cases")+ggtitle("Model 5 Marginal Effects dy/d(civil)")
p_load(patchwork)
a+b/
c+d
(a+b)/
(c+d)
s1aaa<- list(
s1ccc<-lm(data=dat,from_covid~ex_deaths+ex_deaths2),
s2ccc<-lm(data=dat,from_covid~ex_deaths+ex_deaths2+as.factor(reg_name)+as.factor(date)),
s3ccc<-lm(data=dat,from_covid~ex_deaths+ex_deaths:civil+as.factor(reg_name)+as.factor(date)+ex_deaths2),
s1ddd<-lm(data=dat,from_covid~ex_deaths+ex_deaths:score.2017+as.factor(reg_name)+as.factor(date)+ex_deaths2),
s1fff<-lm(data=dat,from_covid~ex_deaths+ex_deaths:UR_share+as.factor(reg_name)+as.factor(date)+ex_deaths2),
s1ggg<-lm(data=dat,from_covid~ex_deaths+ex_deaths:UR_share+as.factor(reg_name)+as.factor(date)+ex_deaths:score.2017+ex_deaths:civil+ex_deaths2))
s1ccc<-lm(data=dat,from_covid~ex_deaths+ex_deaths2)
s1ggg<-lm(data=dat,from_covid~ex_deaths+ex_deaths:UR_share+as.factor(reg_name)+as.factor(date)+ex_deaths:score.2017+ex_deaths:civil+ex_deaths2)
df_art1<-ggpredict(s1ccc, terms = "ex_deaths")
e<-ggplot(df_art1, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("Excess deaths")+ylab("Official Deaths")+ggtitle("Model 1 Marginal Effects dy/d(excess deaths)")
s1aaa<- list(
s1ccc<-lm(data=dat,from_covid~ex_deaths+ex_deaths2),
s2ccc<-lm(data=dat,from_covid~ex_deaths+ex_deaths2+as.factor(reg_name)+as.factor(date)),
s3ccc<-lm(data=dat,from_covid~ex_deaths+ex_deaths:civil+as.factor(reg_name)+as.factor(date)+ex_deaths2),
s1ddd<-lm(data=dat,from_covid~ex_deaths+ex_deaths:score.2017+as.factor(reg_name)+as.factor(date)+ex_deaths2),
s1fff<-lm(data=dat,from_covid~ex_deaths+ex_deaths:UR_share+as.factor(reg_name)+as.factor(date)+ex_deaths2),
s1ggg<-lm(data=dat,from_covid~ex_deaths+ex_deaths:UR_share+as.factor(reg_name)+as.factor(date)+ex_deaths:score.2017+ex_deaths:civil+ex_deaths2))
se_clust <- function(x)
coeftest(x, vcov = vcovCL, cluster = ~reg_name+date)[, 2]
stargazer(s1aaa, se = lapply(s1aaa,se_clust),omit=c("reg_name","date"),omit.stat=c("f","ser"),type="text")
df_art2<-ggpredict(s1ggg, terms = "ex_deaths")
f<-ggplot(df_art2, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("Excess deaths")+ylab("Official Deaths")+ggtitle("Model 6 Marginal Effects dy/d(excess deaths)")
df_art3<-ggpredict(s1ggg, terms = c("score.2017"))
g<-ggplot(df_art3, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("Institutions")+ylab("Official Deaths")+ggtitle("Model 6 Marginal Effects dy/d(Institutions)")
df_art4<-ggpredict(s1ggg, terms = c("UR_share"))
h<-ggplot(df_art4, aes(x, predicted)) +
geom_line() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .1)+theme_bw()+xlab("UR Share")+ylab("Official Deaths")+ggtitle("Model 6 Marginal Effects dy/d(UR share)")
(e+f)/
(g+h)
mean(dat$ex_deaths)
names<-fread("names_for_protest.csv")
dat2<-merge(dat,names,by="reg_name",keep.x=T,keep.y=T)
dat2$month<-dat2$date
protests<-fread("protests.csv")
protests$month<-as.Date(protests$month)
pre<-protests[protests$month<=as.Date("2020-03-01"),]
pre<-aggregate(pre[, c("num_protest"  ,"protest_navalny","protest_kprf"     , "protest_intervention")], list(pre$region), mean)
names(pre)<-c("region","pre_num_protest",      "pre_protest_navalny","pre_protest_kprf"        ,"pre_protest_intervention")
protests<-merge(protests,pre,by="region")
protests$month<-as.character(protests$month)
dat2$month<-as.character(dat2$month)
dat3<-merge(dat2,protests,by=c("region","month"),all.x=T)
dat3$I<-0
dat3$I[dat3$month=="2020-08-01"]<-1
dat3$I[dat3$month=="2021-01-01"]<-1
dat3$I[dat3$month=="2021-02-01"]<-1
min(protests$month)
max(protests$month)
dat3$I<-0
dat3$I[dat3$month=="2020-08-01"]<-1
dat3$I[dat3$month=="2021-01-01"]<-1
dat3$I[dat3$month=="2021-02-01"]<-1
dat3$misinformation<-dat3$ex_deaths-dat3$from_covid
s1aaa<- list(
s1ccc<-lm(data=dat3,num_protest~misinformation+I+misinformation:civil:I+misinformation:civil+misinformation:I+as.factor(reg_name)+as.factor(date)),
s1ddd<-lm(data=dat3,num_protest~misinformation+I+misinformation:score.2017:I+misinformation:score.2017+misinformation:I+as.factor(reg_name)+as.factor(date)),
s1fff<-lm(data=dat3,num_protest~misinformation+I+misinformation:score.2017:I+misinformation:I+misinformation:civil:I+misinformation:score.2017:I+as.factor(reg_name)+as.factor(date)))
se_clust <- function(x)
coeftest(x, vcov = vcovCL, cluster = ~reg_name+date)[, 2]
stargazer(s1aaa, se = lapply(s1aaa, se_clust),omit=c("reg_name","date"),type="text",omit.stat=c("f","ser"))
dat3$misinformation2<-dat3$misinformation^2
s1aaa<- list(
s1ccc<-lm(data=dat3,num_protest~misinformation+misinformation2+misinformation:civil+as.factor(reg_name)+as.factor(date)),
s1ddd<-lm(data=dat3,num_protest~misinformation+misinformation:score.2017+misinformation:score.2017+misinformation2+as.factor(reg_name)+as.factor(date)),
s1fff<-lm(data=dat3,num_protest~misinformation+misinformation:score.2017+misinformation+misinformation:civil+misinformation2+as.factor(reg_name)+as.factor(date)))
se_clust <- function(x)
coeftest(x, vcov = vcovCL, cluster = ~reg_name+date)[, 2]
stargazer(s1aaa, se = lapply(s1aaa, se_clust),omit=c("reg_name","date"),type="text",omit.stat=c("f","ser"))
dat3$num_protest[is.na(dat3$num_protest)] <- 0
dat3$num_protest
table(dat3$num_protest)
se_clust <- function(x)
coeftest(x, vcov = vcovCL, cluster = ~reg_name+date)[, 2]
dat3$misinformation2<-dat3$misinformation^2
s1aaa<- list(
s1ccc<-lm(data=dat3,num_protest~misinformation+misinformation2+misinformation:civil+as.factor(reg_name)+as.factor(date)),
s1ddd<-lm(data=dat3,num_protest~misinformation+misinformation:score.2017+misinformation:score.2017+misinformation2+as.factor(reg_name)+as.factor(date)),
s1fff<-lm(data=dat3,num_protest~misinformation+misinformation:score.2017+misinformation+misinformation:civil+misinformation2+as.factor(reg_name)+as.factor(date)))
se_clust <- function(x)
coeftest(x, vcov = vcovCL, cluster = ~reg_name+date)[, 2]
stargazer(s1aaa, se = lapply(s1aaa, se_clust),omit=c("reg_name","date"),type="text",omit.stat=c("f","ser"))
dat3$protest<-0
dat3$protest[dat3$num_protest>0]<-1
table(dat3$protest)
dat3$misinformation2<-dat3$misinformation^2
s1aaa<- list(
s1ccc<-lm(data=dat3,protest~misinformation+misinformation2+misinformation:civil+as.factor(reg_name)+as.factor(date)),
s1ddd<-lm(data=dat3,protest~misinformation+misinformation:score.2017+misinformation:score.2017+misinformation2+as.factor(reg_name)+as.factor(date)),
s1fff<-lm(data=dat3,protest~misinformation+misinformation:score.2017+misinformation+misinformation:civil+misinformation2+as.factor(reg_name)+as.factor(date)))
se_clust <- function(x)
coeftest(x, vcov = vcovCL, cluster = ~reg_name+date)[, 2]
stargazer(s1aaa, se = lapply(s1aaa, se_clust),omit=c("reg_name","date"),type="text",omit.stat=c("f","ser"))
dat3$misinformation2<-dat3$misinformation^2
s1aaa<- list(
s1ccc<-lm(data=dat3,protest~excess_deaths+from_covid+excess_deaths2+excess_deaths:civil+as.factor(reg_name)+as.factor(date)),
s1ddd<-lm(data=dat3,protest~excess_deaths+from_covid+excess_deaths:score.2017+excess_deaths:score.2017+misinformation2+as.factor(reg_name)+as.factor(date)),
s1fff<-lm(data=dat3,protest~excess_deaths+from_covid+excess_deaths:score.2017+excess_deaths+excess_deaths:civil+excess_deaths2+as.factor(reg_name)+as.factor(date)))
dat3$misinformation2<-dat3$misinformation^2
s1aaa<- list(
s1ccc<-lm(data=dat3,protest~ex_deaths+from_covid+ex_deaths2+ex_deaths:civil+as.factor(reg_name)+as.factor(date)),
s1ddd<-lm(data=dat3,protest~ex_deaths+from_covid+ex_deaths:score.2017+ex_deaths:score.2017+ex_deaths2+as.factor(reg_name)+as.factor(date)),
s1fff<-lm(data=dat3,protest~ex_deaths+from_covid+ex_deaths:score.2017+ex_deaths+ex_deaths:civil+ex_deaths2+as.factor(reg_name)+as.factor(date)))
se_clust <- function(x)
coeftest(x, vcov = vcovCL, cluster = ~reg_name+date)[, 2]
stargazer(s1aaa, se = lapply(s1aaa, se_clust),omit=c("reg_name","date"),type="text",omit.stat=c("f","ser"))
knitr::opts_chunk$set(echo = TRUE)
a2$SELow<-as.factor(a2$SELow)
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
p_load(data.table, dplyr) # two modern packages to modify data objects in R
p_load(ggplot2, alluvial) # two packages to visualize data
p_load(readr, dplyr,lubridate,magrittr,rebus,data.table, tidyr, coefplot,plyr,bit64,stargazer,openxlsx,purrr,stringr,AER,conjoint)
p<-fread("textNov20_cleaned.csv")
p<-p[-2,]
p<-p[p$DistributionChannel!="preview",]
p<-p[-1,]
pilot<-fread("numNov20_cleaned.csv")
pilot<-pilot[-2,]
pilot<-pilot[pilot$DistributionChannel!="preview",]
pilot<-pilot[-1,]
pilot$SE1_1<-4-as.numeric(pilot$`Self.esteem1_1`)
pilot$SE1_2<-4-as.numeric(pilot$`Self.esteem1_2`)
pilot$SE1_3<-4-as.numeric(pilot$`Self.esteem1_3`)
pilot$SE1_4<-4-as.numeric(pilot$`Self.esteem1_4`)
pilot$SE2_1<-as.numeric(pilot$`Self.esteem2_1`)
pilot$SE2_2<-as.numeric(pilot$`Self.esteem2_2`)
pilot$SE2_3<-as.numeric(pilot$`Self.esteem2_3`)
pilot$SE2_4<-as.numeric(pilot$`Self.esteem2_4`)
pilot$SelfEsteem=pilot$SE1_1+pilot$SE1_2+pilot$SE1_3+pilot$SE1_4+pilot$SE2_1+pilot$SE2_2+pilot$SE2_3 +pilot$SE2_4
pilot$SMPOS<-0
pilot$SMPOS[pilot$Q63!=""]<-1
pilot$SMNEG<-0
pilot$SMNEG[pilot$Tr_Neg_M_rank_1!=""|pilot$Q55!=""]<-1
pilot$SMCON<-1-pilot$SMNEG-pilot$SMPOS
pilot<-as.data.frame(pilot)
pil<- pilot[!grepl("Timing",row.names(pilot)),
!grepl("Timing", colnames(pilot))]
pil<- pilot[!grepl("time",row.names(pilot)),
!grepl("time", colnames(pilot))]
pil<- pilot[!grepl("time",row.names(pilot)),
!grepl("Time", colnames(pilot))]
pil <- pil %>%
mutate_at(vars(contains("Fact")), as.numeric)
pil <- pil %>%
mutate_at(vars(contains("Op")), as.numeric)
pil$Fscore<-rowSums(select(pil, matches("Fact")))
pil$Oscore<-rowSums(select(pil, matches("OP")))
pil$Score<-pil$Fscore+pil$Oscore
pil$st1_time<-pil$Q128_elapsed/60
pil$st2_time<-pil$Q129_elapsed/60
pil$st3_time<-pil$Q130_elapsed/60
pil$st4_time<-pil$Q131_elapsed/60
pil$stat_time<-pil$st1_time+pil$st2_time+pil$st3_time+pil$st4_time
times<-pil[,c("st1_time","st2_time","st3_time","st4_time")]
pairs(times)
pil$Conservative<-pil$Q147
pil<-pil[pil$Progress=="100",]
clean<-pil[,c("ResponseId","Dem_Gender","Dem_edu","Q147", "SelfEsteem","SMPOS","SMNEG","SMCON","Fscore","Oscore","Score","Conservative","Fact_Health_Social_N_1","Op_Health_NP_N_1","Op_Econ_NP_N_1.1","Fact_Pol_Social_N_1","Op_Pol_NP_R_1","Fact_Econ_NP_N_1","Op_Health_Social_N_1","Op_Pol_Social_D_1","Fact_Pol_Social_D_1",        "Op_Econ_Social_D_1","Fact_Pol_NP_R_1","Op_Econ_Social_R_1","Fact_Econ_Social_N_1",       "Fact_Health_Social_N_1.1","Op_Health_Social_N_1.1","Fact_Econ_NP_N_1.1","Op_Health_NP_N_1.1","Op_Pol_Social_R_1","Op_Pol_NP_D_1","Fact_Econ_Social_N_1.1","Fact_Health_NP_N_1","Fact_Health_NP_N_1.1","stat_time" )]
a<-melt(setDT(clean), id.vars = c("ResponseId","Dem_Gender","Dem_edu","SelfEsteem","SMPOS","SMNEG","SMCON","Fscore","Oscore","Score","Conservative","stat_time","Q147"), variable.name = "Question")
a$Type<-"Fact"
a$Type[grepl("Op", a$Question)]<-"Opinion"
a$Topic<-"Politics"
a$Topic[grepl("Econ", a$Question)]<-"Econ"
a$Topic[grepl("Health", a$Question)]<-"Health"
a$Media<-"NP"
a$Media[grepl("Social", a$Question)]<-"Social"
a$Slant<-"N"
a$Slant[grepl("_R_", a$Question)]<-"Rep"
a$Slant[grepl("_D_", a$Question)]<-"Dem"
p_load("cregg")
#data("immigration")
#data("taxes")
a$Slant<-as.factor(a$Slant)
a$Media<-as.factor(a$Media)
a$Topic<-as.factor(a$Topic)
a$Type<-as.factor(a$Type)
a$SMPOS<-as.factor(a$SMPOS)
a$SMNEG<-as.factor(a$SMNEG)
a$Rep<-0
a$Rep[a$Q147<7]<-1
a$Rep[a$Q147<4]<-0
a$Dem<-0
a$Dem[a$Q147<4]<-1
a$Ind<-0
a$Ind[a$Q147==4 | a$Q147==7]<-1
a$SelfSlant<-0
a$SelfSlant[a$Rep==1 & a$Slant=="Rep"]<-1
a$SelfSlant[a$Rep==1 & a$Slant=="Dem"]<-1
a$SelfSlant[a$Ind==1 & a$Slant=="N"]<-1
a$SelfSlant<-as.factor(a$SelfSlant)
f1 <- value ~ Type + Topic + Media + SelfSlant
#summary(amce(a[a$SMCON==1], f1, id = ~ResponseId))
a$Type<-as.factor(a$Type)
a$Topic<-as.factor(a$Topic)
a$Media<-as.factor(a$Media)
plot(amce(a[a$SMCON==1], f1, id = ~ResponseId))+aes(size=5)
time_all<-lm(data=pil, stat_time~SMPOS+SMNEG+SelfEsteem+Dem_Gender+Conservative)
time_1<-lm(data=pil, st1_time~SMPOS+SMNEG+SelfEsteem+Dem_Gender+Conservative)
time_2<-lm(data=pil, st2_time~SMPOS+SMNEG+SelfEsteem+Dem_Gender+Conservative)
time_3<-lm(data=pil, st3_time~SMPOS+SMNEG+SelfEsteem+Dem_Gender+Conservative)
time_4<-lm(data=pil, st4_time~SMPOS+SMNEG+SelfEsteem+Dem_Gender+Conservative)
stargazer(time_all)
a2<-a[a$stat_time>=1,]
a2<-a2[a2$stat_time<=10,]
a2$SELow<-0
a2$SELow[a2$SelfEsteem<21]<-1
clean$SELow<-0
clean$SELow[clean$SelfEsteem<21]<-1
Oscore_all<-lm(data=clean, Oscore~SMPOS+SMNEG+SelfEsteem+Dem_Gender+Conservative)
Fscore_all<-lm(data=clean, Fscore~SMPOS+SMNEG+SelfEsteem+Dem_Gender+Conservative)
Oscore_all2<-lm(data=clean, Oscore~SMPOS+SMNEG+SelfEsteem*SMPOS+SelfEsteem*SMNEG+Dem_Gender+Conservative)
Fscore_all2<-lm(data=clean, Fscore~SMPOS+SMNEG+SelfEsteem*SMPOS+SelfEsteem*SMNEG+Dem_Gender+Conservative)
stargazer(Oscore_all,Fscore_all,Oscore_all2,Fscore_all2,type="text")
Oscore_all<-lm(data=a2, Oscore~SMPOS+SMNEG+Dem_Gender+SelfSlant*SMPOS+SelfSlant*SMNEG)
Fscore_all<-lm(data=a2, Fscore~SMPOS+SMNEG+Dem_Gender+SelfSlant*SMPOS+SelfSlant*SMNEG)
Oscore_all2<-lm(data=a2, Oscore~SMPOS+SMNEG+SelfEsteem*SMPOS+SelfEsteem*SMNEG+Dem_Gender+SelfSlant*SMPOS+SelfSlant*SMNEG)
Fscore_all2<-lm(data=a2, Fscore~SMPOS+SMNEG+SelfEsteem*SMPOS+SelfEsteem*SMNEG+Dem_Gender+SelfSlant*SMPOS+SelfSlant*SMNEG)
stargazer(Oscore_all,Fscore_all,Oscore_all2,Fscore_all2,type="text")
a2$correct<-as.numeric(a2$value)
ag<-aggregate(a2$correct,by= list(a2$ResponseId,a2$Type,a2$SelfSlant, a2$SMPOS,a2$SMNEG,a2$Dem_Gender,a2$SelfEsteem), FUN=mean)
names(ag)<-c("id","Type","SelfSlant","SMPOS","SMNEG","Gender","SelfEsteem","Correct")
mod1<-lm(Correct~Type*SelfSlant+SMPOS*Gender,data=ag[ag$SMNEG==0,])
mod2<-lm(Correct~Type*SelfSlant+SMNEG*Gender,data=ag[ag$SMPOS==0,])
mod3<-lm(Correct~Type*SelfSlant*SMPOS+as.factor(id),data=ag[ag$SMNEG==0,])
mod4<-lm(Correct~Type*SelfSlant*SMNEG+as.factor(id),data=ag[ag$SMPOS==0,])
#stargazer(mod1,mod2, omit="id",type="text")
stargazer(mod3,mod4, omit="id",type="text")
s1aaa<- list(
mod1<-lm(Correct~Type*SelfSlant*SMPOS,data=ag[ag$SMNEG==0,]),
mod2<-lm(Correct~Type*SelfSlant*SMNEG,data=ag[ag$SMPOS==0,])
#mod3<-lm(Correct~Type*SelfSlant*SMPOS+as.factor(id),data=ag[ag$SMNEG==0,]),
#mod4<-lm(Correct~Type*SelfSlant*SMNEG+as.factor(id),data=ag[ag$SMPOS==0,])
)
#stargazer(mod1,mod2, omit="id",type="text")
se_clust <- function(x)
coeftest(x, vcov = vcovCL, cluster = ~id)[, 2]
stargazer(s1aaa, se = lapply(s1aaa, se_clust),omit="id",type="text",omit.stat=c("f","ser"))
ag$treated<-0
ag$treated[ag$SMPOS==1|ag$SMNEG==1]<-1
s1aaa<- list(
mod1<-lm(Correct~Type*SelfSlant*SMPOS,data=ag[ag$SMNEG==0,]),
mod2<-lm(Correct~Type*SelfSlant*SMNEG,data=ag[ag$SMPOS==0,]),
mod3<-lm(Correct~Type*SelfSlant*treated,data=ag)
#mod3<-lm(Correct~Type*SelfSlant*SMPOS+as.factor(id),data=ag[ag$SMNEG==0,]),
#mod4<-lm(Correct~Type*SelfSlant*SMNEG+as.factor(id),data=ag[ag$SMPOS==0,])
)
#stargazer(mod1,mod2, omit="id",type="text")
se_clust <- function(x)
coeftest(x, vcov = vcovCL, cluster = ~id)[, 2]
stargazer(s1aaa, se = lapply(s1aaa, se_clust),omit="id",type="text",omit.stat=c("f","ser"))
mod1<-lm(Correct~Type+SelfSlant*SelfEsteem+Gender,data=ag)
mod2<-lm(Correct~Type+SelfSlant*SelfEsteem+Gender,data=ag)
stargazer(mod1,mod2, omit="id",omit.stat="f",type="text")
#stargazer(mod3,mod4, omit="id",omit.stat="f",type="text")
a2$status<-"Control"
a2$status[a2$SMPOS==1]<-"Positive"
a2$status[a2$SMNEG==1]<-"Negative"
a2$status<-as.factor(a2$status)
mm_by <- cj(data=a2,value ~ Type + Topic + Media + SelfSlant, id = ~ResponseId, estimate = "amce")
png("amce_tot.png")
plot(mm_by,  vline = 0.5,size=2.5)
dev.off()
a2$status<-"Control"
a2$status[a2$SMPOS==1]<-"Positive"
a2$status[a2$SMNEG==1]<-"Negative"
a2$status<-as.factor(a2$status)
mm_by <- cj(data=a2[a2$SMCON==1],value ~ Type + Topic + Media + SelfSlant, id = ~ResponseId, estimate = "amce")
png("amce_tot_in_control.png")
plot(mm_by,  vline = 0.5,size=2.5)
dev.off()
cj_anova_tot<-cj_anova(data=a2,value ~ Type + Topic + Media + SelfSlant, id = ~ResponseId, by = ~status)
stargazer(cj_anova_tot)
a2$SELow<-as.factor(a2$SELow)
mm_by <- cj(data=a2,value ~ Type + Topic + Media + SelfSlant, id = ~ResponseId, estimate = "mm", by = ~SELow)
png("mm_SELow.png")
plot(mm_by, group = "SELow", vline = 0.5)
dev.off()
a2$SELow<-as.factor(a2$SELow)
mm_by_so <- cj(data=a2[a2$SelfSlant==1 & a2$Opinion==1,],value ~ Topic + Media, id = ~ResponseId, estimate = "mm", by = ~SELow)
a2$SELow<-as.factor(a2$SELow)
mm_by_so <- cj(data=a2[a2$SelfSlant==1 & a2$Opinion==1,],value ~ Topic + Media, id = ~ResponseId, estimate = "mm", by = ~SELow)
a2$SELow<-as.factor(a2$SELow)
mm_by_so <- cj(data=a2[a2$Opinion==1,],value ~ Topic + Media, id = ~ResponseId, estimate = "mm", by = ~SELow)
a2$SELow<-as.factor(a2$SELow)
mm_by_so <- cj(data=a2[a2$SelfSlant==1 & a2$Type="Opinion",],value ~ Topic + Media, id = ~ResponseId, estimate = "mm", by = ~SELow)
a2$SELow<-as.factor(a2$SELow)
mm_by_so <- cj(data=a2[a2$SelfSlant==1 & a2$Type=="Opinion",],value ~ Topic + Media, id = ~ResponseId, estimate = "mm", by = ~SELow)
summary(mm_by_so)
#png("mm_SELow.png")
plot(mm_by_so, group = "SELow", vline = 0.5)
#dev.off()
a2$SELow<-as.factor(a2$SELow)
mm_by_so <- cj(data=a2[a2$SelfSlant==1 & a2$Type=="Fact",],value ~ Topic + Media, id = ~ResponseId, estimate = "mm", by = ~SELow)
summary(mm_by_so)
#png("mm_SELow.png")
plot(mm_by_so, group = "SELow", vline = 0.5)
#dev.off()
a2$SELow<-as.factor(a2$SELow)
mm_by_so <- cj(data=a2[a2$SelfSlant==1,],value ~ Type+Topic + Media, id = ~ResponseId, estimate = "mm", by = ~SELow)
summary(mm_by_so)
#png("mm_SELow.png")
plot(mm_by_so, group = "SELow", vline = 0.5)
#dev.off()
library(pacman)
p_load(rdrobust)
x<-runif(1000,-1,1)
y<-5+3*x+2*(x>=0)+rnorm(1000)
rdbwselect(y,x)
rdplot(y,x)
a<-rdrobust(y,x,all=T)
summary(a)
p_load(tidyverse,broom,rdrobust,estimatr,modelsummary,kableExtra)
tutoring <- read_csv("tutoring_program_fuzzy.csv")
ggplot(tutoring, aes(x = entrance_exam, y = tutoring_text, color = entrance_exam <= 70)) +
# Make points small and semi-transparent since there are lots of them
geom_point(size = 1.5, alpha = 0.5,
position = position_jitter(width = 0, height = 0.25, seed = 1234)) +
# Add vertical line
geom_vline(xintercept = 70) +
# Add labels
labs(x = "Entrance exam score", y = "Participated in tutoring program") +
# Turn off the color legend, since it's redundant
guides(color = FALSE)
ggplot(tutoring, aes(x = entrance_exam, y = exit_exam, color = tutoring)) +
geom_point(size = 1, alpha = 0.5) +
# Add a line based on a linear model for the people scoring less than 70
geom_smooth(data = filter(tutoring, entrance_exam <= 70), method = "lm") +
# Add a line based on a linear model for the people scoring 70 or more
geom_smooth(data = filter(tutoring, entrance_exam > 70), method = "lm") +
geom_vline(xintercept = 70) +
labs(x = "Entrance exam score", y = "Exit exam score", color = "Used tutoring")
tutoring_centered <- tutoring %>%
mutate(entrance_centered = entrance_exam - 70,
below_cutoff = entrance_exam <= 70)
tutoring_centered
model_sans_instrument <- lm(exit_exam ~ entrance_centered + tutoring,
data = filter(tutoring_centered,
entrance_centered >= -10 &
entrance_centered <= 10))
tidy(model_sans_instrument)
library(pacman)
p_load(rdrobust)
x<-runif(1000,-1,1)
y<-5+3*x+2*(x>=0)+rnorm(1000)
rdbwselect(y,x)
rdplot(y,x)
a<-rdrobust(y,x,all=T)
summary(a)
p_load(tidyverse,broom,rdrobust,estimatr,modelsummary,kableExtra)
tutoring <- read_csv("tutoring_program_fuzzy.csv")
ggplot(tutoring, aes(x = entrance_exam, y = tutoring_text, color = entrance_exam <= 70)) +
# Make points small and semi-transparent since there are lots of them
geom_point(size = 1.5, alpha = 0.5,
position = position_jitter(width = 0, height = 0.25, seed = 1234)) +
# Add vertical line
geom_vline(xintercept = 70) +
# Add labels
labs(x = "Entrance exam score", y = "Participated in tutoring program") +
# Turn off the color legend, since it's redundant
guides(color = FALSE)
ggplot(tutoring, aes(x = entrance_exam, y = exit_exam, color = tutoring)) +
geom_point(size = 1, alpha = 0.5) +
# Add a line based on a linear model for the people scoring less than 70
geom_smooth(data = filter(tutoring, entrance_exam <= 70), method = "lm") +
# Add a line based on a linear model for the people scoring 70 or more
geom_smooth(data = filter(tutoring, entrance_exam > 70), method = "lm") +
geom_vline(xintercept = 70) +
labs(x = "Entrance exam score", y = "Exit exam score", color = "Used tutoring")
tutoring_centered <- tutoring %>%
mutate(entrance_centered = entrance_exam - 70,
below_cutoff = entrance_exam <= 70)
tutoring_centered
model_sans_instrument <- lm(exit_exam ~ entrance_centered + tutoring,
data = filter(tutoring_centered,
entrance_centered >= -10 &
entrance_centered <= 10))
tidy(model_sans_instrument)
model_fuzzy <- iv_robust(
exit_exam ~ entrance_centered + tutoring | entrance_centered + below_cutoff,
data = filter(tutoring_centered, entrance_centered >= -10 & entrance_centered <= 10)
)
tidy(model_fuzzy)
p_load("memisc")
ukr <- data.frame(as.data.set(spss.system.file("Data_OMN_February_2024_UT.sav")))
p_load("haven")
ukr <- read_sav("Data_OMN_February_2024_UT.sav")
View(ukr)
summary(ukr$V248)
summary(ukr$V249)
summary(ukr$V250)
p_load("sjlabelled")
ukr <- read_spss("Data_OMN_February_2024_UT.sav")
ukr$V248 %>% attr('labels')
summary(ukr$V250)
View(ukr)
View(ukr)
summary(ukr$T4_1)
ukr$T4_1 %>% attr('labels')
View(ukr)
summary(ukr$T4_2)
summary(ukr$T4_3)
summary(ukr$T4_4)
summary(ukr$T4_5)
summary(ukr$T4_6)
summary(ukr$V250)
summary(ukr$T4_1)
summarise(ukr$V250)
summarize(ukr$V250)
summary(ukr$V250)
str(uk)
str(ukr)
ukr_num<-read_sav("Data_OMN_February_2024_UT.sav")
str(ukr_num)
summary(ukr_num$T4_1)
summary(ukr_num$V248)
(ukr$V249)
summary(ukr$V249)
summary(ukr_num$V249)
summary(ukr_num$V250)
summary(ukr_num$V249)
View(ukr)
summary(ukr$T4_6)
m1<-lm(data=ukr_num,V248~T4_6)
summary(m1)
View(ukr_num)
m1<-lm(data=ukr_num,V248~T4_6+as.factor(oblast))
stargazer(m1,type="text",omit="oblast")
View(ukr_num)
m1<-lm(data=ukr_num,V248~T4_1+as.factor(oblast))
stargazer(m1,type="text",omit="oblast")
m1<-lm(data=ukr_num,V248~T4_2+as.factor(oblast))
stargazer(m1,type="text",omit="oblast")
m1<-lm(data=ukr_num,V248~T4_3+as.factor(oblast))
stargazer(m1,type="text",omit="oblast")
m1<-lm(data=ukr_num,V248~T4_4+as.factor(oblast))
stargazer(m1,type="text",omit="oblast")
m1<-lm(data=ukr_num,V248~T4_5+as.factor(oblast))
stargazer(m1,type="text",omit="oblast")
m1<-lm(data=ukr_num,V248~T4_6+as.factor(oblast))
stargazer(m1,type="text",omit="oblast")
View(ukr_num)
m1<-lm(data=ukr_num,V248~T4_6+as.factor(oblast)+as.factor(settlement_type))
stargazer(m1,type="text",omit=c("oblast","settlement_type"))
View(ukr_num)
library(pacman)
p_load(rdrobust)
x<-runif(1000,-1,1)
y<-5+3*x+2*(x>=0)+rnorm(1000)
rdbwselect(y,x)
a<-rdrobust(y,x,all=T)
p_load(tidyverse,broom,rdrobust,estimatr,modelsummary,kableExtra)
tutoring <- read_csv("tutoring_program_fuzzy.csv")
ggplot(tutoring, aes(x = entrance_exam, y = exit_exam, color = tutoring)) +
geom_point(size = 1, alpha = 0.5) +
# Add a line based on a linear model for the people scoring less than 70
geom_smooth(data = filter(tutoring, entrance_exam <= 70), method = "lm") +
# Add a line based on a linear model for the people scoring 70 or more
geom_smooth(data = filter(tutoring, entrance_exam > 70), method = "lm") +
geom_vline(xintercept = 70) +
labs(x = "Entrance exam score", y = "Exit exam score", color = "Used tutoring")
tutoring_centered <- tutoring %>%
mutate(entrance_centered = entrance_exam - 70,
below_cutoff = entrance_exam <= 70)
tutoring_centered
